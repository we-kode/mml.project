"use strict";(self.webpackChunkmy_media_lib=self.webpackChunkmy_media_lib||[]).push([[356],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(t),d=i,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||r;return t?a.createElement(h,s(s({ref:n},p),{},{components:t})):a.createElement(h,s({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var u=2;u<r;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8163:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_position:2},s="Administration App",o={unversionedId:"customize/administration-app",id:"customize/administration-app",title:"Administration App",description:"You can customize the title, the logo and colors of your admin app.",source:"@site/docs/customize/administration-app.md",sourceDirName:"customize",slug:"/customize/administration-app",permalink:"/mml.project/customize/administration-app",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Customization",permalink:"/mml.project/category/customization"},next:{title:"android",permalink:"/mml.project/customize/android"}},l={},u=[{value:"Customize",id:"customize",level:2},{value:"Manually",id:"manually",level:3},{value:"Automated",id:"automated",level:3},{value:"Github Action Workflow",id:"github-action-workflow",level:2},{value:"Listen to release tags",id:"listen-to-release-tags",level:3},{value:"Build the app and release it.",id:"build-the-app-and-release-it",level:3},{value:"Run action release",id:"run-action-release",level:3}],p={toc:u};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"administration-app"},"Administration App"),(0,i.kt)("p",null,"You can customize the title, the logo and colors of your admin app."),(0,i.kt)("h2",{id:"customize"},"Customize"),(0,i.kt)("h3",{id:"manually"},"Manually"),(0,i.kt)("p",null,"You can customize the app manually. Please check the offical documentation on how to do this for ",(0,i.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/deployment/windows"},"windows"),", ",(0,i.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/deployment/linux"},"linux")," or ",(0,i.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/deployment/macos"},"macOS"),". This guide will show an automated process with github actions. "),(0,i.kt)("h3",{id:"automated"},"Automated"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The automated customization script runs on linux systems only.")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.administration-app"},"mml.administration-app")," provides one ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," folder, where all configurations for the customization are included. Replace the configs with your custom needs."),(0,i.kt)("admonition",{title:"Filenames",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Please do not change the filenames in the config folder. Just replace them by your own files with the same filename.")),(0,i.kt)("p",null,"Icons you can ",(0,i.kt)("a",{parentName:"p",href:"https://www.appicon.co/"},"generate")," and replace the icons in the ",(0,i.kt)("inlineCode",{parentName:"p"},"icons")," folder. You can ",(0,i.kt)("a",{parentName:"p",href:"https://m3.material.io/theme-builder#/custom"},"generate your custom color scheme")," and replace the color values in ",(0,i.kt)("inlineCode",{parentName:"p"},"lib_color_schemes.g.dart"),".\nThe title in different languages and the bundle or app id you can update in the app.cfg file."),(0,i.kt)("p",null,"To update run the ",(0,i.kt)("inlineCode",{parentName:"p"},"./customize")," script. This script will clone the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.administration-app"},"mml.administration-app")," and replace all items with the items in the configuration. Copy the ",(0,i.kt)("inlineCode",{parentName:"p"},"./mml.administration-app")," folder to the os you like and ",(0,i.kt)("a",{parentName:"p",href:"../setup/administration-app"},"build the app from source"),"."),(0,i.kt)("h2",{id:"github-action-workflow"},"Github Action Workflow"),(0,i.kt)("p",null,"All the steps above can be done with github actions. Fork the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.administration-app"},"mml.administration-app")," and ",(0,i.kt)("a",{parentName:"p",href:"#automated"},"customize")," the app on your needs. The github workflow consists two actions. Sync fork for listen to new releases and Flutter CI to build the app, when new release is available. You need some ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets"},"github secrets"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"SYNC_PAT")," is a Personal Access Token with the right to create releases.\nFor more information check the ",(0,i.kt)("a",{parentName:"p",href:"https://angeloavv.medium.com/how-to-distribute-flutter-desktop-app-binaries-using-github-actions-f8d0f9be4d6b"},"step by step guides")," for ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/packages/msix"},"windows msix"),", linux and ",(0,i.kt)("a",{parentName:"p",href:"https://medium.com/flutter-community/build-sign-and-deliver-flutter-macos-desktop-applications-on-github-actions-5d9b69b0469c"},"macOS dmg"),". "),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Replace all texts in <...Some text...> with your custom values. More comments are in code of actions.")),(0,i.kt)("h3",{id:"listen-to-release-tags"},"Listen to release tags"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'name: Sync fork with upstream\n\non:\n  schedule:\n  - cron:  "0 0 1/7 * *"\n  workflow_dispatch:\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        token: ${{ secrets.SYNC_PAT }}\n        persist-credentials: false\n    - name: repo-sync\n      uses: repo-sync/github-sync@v2\n      with:\n        source_repo: "https://github.com/we-kode/mml.administration-app"\n        source_branch: "master"\n        destination_branch: "master"\n        github_token: ${{ secrets.SYNC_PAT }}\n        sync_tags: "true"\n    - uses: oprypin/find-latest-tag@v1\n      id: latest-tag\n      with:\n         repository: <your-name>/mml.administration-app\n    - name: Tag\n      run: |\n          tag=${{ steps.latest-tag.outputs.tag }}-mml\n          git config user.name "${GITHUB_ACTOR}"\n          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"\n          git tag -a "${tag}" -m ""\n          git push origin "${tag}"\n      if: ${{ !endsWith(steps.latest-tag.outputs.tag,\'-mml\') }}\n    \n    - name: create release\n      uses: ncipollo/release-action@v1\n      if: ${{ !endsWith( steps.latest-tag.outputs.tag, \'-mml\' ) }}\n      with:\n        tag: ${{ steps.latest-tag.outputs.tag }}-mml\n        token: ${{ secrets.SYNC_PAT }}\n')),(0,i.kt)("h3",{id:"build-the-app-and-release-it"},"Build the app and release it."),(0,i.kt)("admonition",{title:"Windows signing",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"On windows you need to ",(0,i.kt)("a",{parentName:"p",href:"https://sahajrana.medium.com/how-to-generate-a-pfx-certificate-for-flutter-windows-msix-lib-a860cdcebb8"},"create a pfx certificate")," to sign the msxi so windows will allow to install the app.")),(0,i.kt)("admonition",{title:"macOS build not signed",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This example action does not create a signed macOS app. The app cretaed for macOS will not run on your mac machines, cause of unknown developer. You need to sign it first. Please check ",(0,i.kt)("a",{parentName:"p",href:"https://medium.com/flutter-community/build-sign-and-deliver-flutter-macos-desktop-applications-on-github-actions-5d9b69b0469c"},"this guide")," how to sign the macOS app.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'name: Flutter CI\n\n# Controls when the workflow will run\non:\n  push:\n    tags:\n      - "[0-9]+.[0-9]+.[0-9]+-mml"\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  prepare:\n    runs-on: ubuntu-latest\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n      # Runs a set of commands using the runners shell\n      - name: Customizing\n        run: |\n          version="${{ github.ref_name }}"\n          ver_dump=$(echo "${version/-mml/\'\'}")\n          chmod +x customize\n          ./customize\n          sed -i -E "s/version: [0-9]+.[0-9]+.[0-9]+\\+[0-9]+/version: $ver_dump+${{github.run_number}}/" "./mml.administration-app/pubspec.yaml"\n          sed -i -E "s/#define VERSION_AS_STRING \\"1.0.0\\"/#define VERSION_AS_STRING \\"$ver_dump\\"/" "./mml.administration-app/windows/runner/Runner.rc"\n      - name: Artefact customized version\n        uses: actions/upload-artifact@v3\n        with:\n          name: Admin-Custom\n          path: mml.administration-app\n        \n  build-and-release-linux:\n    runs-on: ubuntu-latest\n    needs: [prepare]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: Admin-Custom\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: \'stable\'\n      - name: Install dependencies\n        run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libsecret-1-dev libjsoncpp-dev libsecret-1-0\n      - name: Install project dependencies\n        run: flutter pub get\n      - name: Generate intermediates\n        run: |\n          flutter pub run build_runner build --delete-conflicting-outputs\n          flutter gen-l10n\n      - name: Enable linux build\n        run: flutter config --enable-linux-desktop\n      - name: Build artifacts\n        run: |\n          flutter build linux --release\n      - name: Archive Release\n        uses: thedoctor0/zip-release@master\n        with:\n          type: \'zip\'\n          filename: Admin-${{github.ref_name}}-linux.zip\n          directory: build/linux/x64/release/bundle\n      - name: Linux Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, \'refs/tags/\')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: build/linux/x64/release/bundle/Admin-${{github.ref_name}}-linux.zip\n  \n  build-and-release-windows:\n    runs-on: windows-latest\n    needs: [prepare]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: \'stable\'\n      # save the sign key as base64 string in github secrets\n      - name: Prepare sign key\n        env:\n           PFX_CONTENT: ${{ secrets.SIGN_KEY }}\n        run: |\n           $pfxPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "sign.pfx";\n           $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT);\n           [IO.File]::WriteAllBytes($pfxPath, $encodedBytes)\n           Write-Output "::set-output name=PFX_PATH::$pfxPath";\n        id: create-pfx\n        shell: pwsh\n      - uses: actions/download-artifact@v3\n        with:\n          name: Admin-Custom\n      - name: Install project dependencies\n        run: flutter pub get\n      - name: Generate intermediates\n        run: |\n          flutter pub run build_runner build --delete-conflicting-outputs\n          flutter gen-l10n\n      - name: Enable windows build\n        run: flutter config --enable-windows-desktop\n      # SIGN_PASS: Password of the sign cert.\n      # SIGN_SUB: Subject of the sign cert, e.g\n      #  CN = MML\n      #  OU = ORGANIZATION UNIT\n      #  O = MML\n      #  C = US\n      - name: Build artifacts\n        run: |\n          $version = "${{ github.ref_name }}"\n          $ver_dump = $version.replace(\'-ecg\', \'.0\')\n          flutter build windows --release\n          flutter pub run msix:create --version $ver_dump --install-certificate false -c ${{ steps.create-pfx.outputs.PFX_PATH }} -p ${{ secrets.SIGN_PASS }} -u <Username> -b ${{ secrets.SIGN_SUB }}\n          mkdir rel\n          echo "Before installing app. Install the publisher public key in your Computer Certmanager as Trusted CA Cert, so the publisher will be trusted on your machine." > rel/README_FIRST.txt\n          cp sign.cer rel/sign.cer\n          mv  build/windows/runner/Release/mml_admin.msix rel/Admin-${{github.ref_name}}.msix\n      - name: Archive Release\n        uses: thedoctor0/zip-release@master\n        with:\n          type: \'zip\'\n          filename: Admin-${{github.ref_name}}-windows.zip\n          directory: rel\n      - name: Windows Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, \'refs/tags/\')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: rel/Admin-${{github.ref_name}}-windows.zip\n      - name: Cleanup\n        run: |\n           Remove-Item -Path ${{ steps.create-pfx.outputs.PFX_PATH }};\n  \n  build-and-release-macos:\n    runs-on: macos-latest\n    needs: [prepare]\n    env:\n      MACOS_APP_RELEASE_PATH: build/macos/Build/Products/Release\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: Admin-Custom\n      - uses: subosito/flutter-action@v1\n        with:\n          channel: \'stable\'\n      - name: Install project dependencies\n        run: flutter pub get\n      - name: Generate intermediates\n        run: |\n          flutter pub run build_runner build --delete-conflicting-outputs\n          flutter gen-l10n\n      - name: Enable macOS build\n        run: flutter config --enable-macos-desktop\n      - name: Build artifacts\n        run: flutter build macos --release\n      - name: Create a dmg\n        run: |\n          echo "Install create-dmg"\n          brew install create-dmg\n          cd $MACOS_APP_RELEASE_PATH\n          create-dmg \\\n            --volname "<App Title>" \\\n            --window-pos 200 120 \\\n            --window-size 800 529 \\\n            --icon-size 130 \\\n            --text-size 14 \\\n            --icon "<App Title>.app" 260 250 \\\n            --hide-extension "<App Title>.app" \\\n            --app-drop-link 540 250 \\\n            --hdiutil-quiet \\\n            "Admin-${{github.ref_name}}-macos.dmg" \\\n            "<App Title>.app"\n      - name: macOS Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, \'refs/tags/\')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: build/macos/Build/Products/Release/Admin-${{github.ref_name}}-macos.dmg\n')),(0,i.kt)("h3",{id:"run-action-release"},"Run action release"),(0,i.kt)("p",null,"The sync fork action in this example will sync every week and check for a new relase. You can start the sync fork action manually. The main action will be automatically triggered if a new release exists.\nThe result will be a binary file for linux, a msix installer for windows and a dmg file for macOS."))}c.isMDXComponent=!0}}]);