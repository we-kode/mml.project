"use strict";(self.webpackChunkmy_media_lib=self.webpackChunkmy_media_lib||[]).push([[298],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,k=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?r.createElement(k,a(a({ref:n},l),{},{components:t})):r.createElement(k,a({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:o,a[1]=d;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9160:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:1},a="Backend",d={unversionedId:"setup/backend",id:"setup/backend",title:"Backend",description:"You can install the backend on a server you like. Its your choice. You can use kubernetes, .net install or docker-compose as you like.",source:"@site/docs/setup/backend.md",sourceDirName:"setup",slug:"/setup/backend",permalink:"/mml.project/setup/backend",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/mml.project/category/setup"},next:{title:"Administration App",permalink:"/mml.project/setup/administration-app"}},c={},s=[{value:"Create folder (optional)",id:"create-folder-optional",level:2},{value:"Create mml user",id:"create-mml-user",level:2},{value:"Install docker",id:"install-docker",level:2},{value:"Configure firewall (optional)",id:"configure-firewall-optional",level:2},{value:"Domain and SSL/TLS certificates",id:"domain-and-ssltls-certificates",level:2},{value:"Configure database service",id:"configure-database-service",level:2},{value:"Configure cache service",id:"configure-cache-service",level:2},{value:"Configure message bus",id:"configure-message-bus",level:2},{value:"Configure reverse proxy",id:"configure-reverse-proxy",level:2},{value:"Configure identity service",id:"configure-identity-service",level:2},{value:"Configure media service",id:"configure-media-service",level:2},{value:"Start backend",id:"start-backend",level:2},{value:"Create first admin client and user",id:"create-first-admin-client-and-user",level:2},{value:"Manage admin clients",id:"manage-admin-clients",level:3}],l={toc:s};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"backend"},"Backend"),(0,o.kt)("p",null,"You can install the backend on a server you like. Its your choice. You can use kubernetes, .net install or docker-compose as you like.\nIn this documentation we will focus only on the setup of the backend with docker-compose on a ubuntu 22.05 LTS\nHere we will for you a step by setp guide you can use to setup manual the server\nFeel free to automate the process. However we do not provide a setup script."),(0,o.kt)("p",null,"The backend consist of multple services which need to be setup seperate. We provide one mono docker-compose file and a default .env-configuration file\nIn the .env ifle defaults are define. Feel free to change the configuration on your neeeds."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"We setzen vorraus, dass you wissen wie man linux und docker.compose bedient. Wenn nicht gucke erst auf official docu of dockerc-compose")),(0,o.kt)("h2",{id:"create-folder-optional"},"Create folder (optional)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir ~/medialib\ncd ~/medialib\n")),(0,o.kt)("p",null,"scp docker-compose.yml .env ~/medialib"),(0,o.kt)("p",null,"configure folder rights as you like"),(0,o.kt)("h2",{id:"create-mml-user"},"Create mml user"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo groupadd -r -g 1001 mml && sudo useradd -r -d /nonexistent -s /bin/false -u 1001 -g 1001 mml\n")),(0,o.kt)("h2",{id:"install-docker"},"Install docker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'sudo apt-get remove docker docker-engine docker.io containerd runc\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\necho \\\n  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\nsudo usermod -a -G mml media\nsudo docker network create wekode.mml\n')),(0,o.kt)("h2",{id:"configure-firewall-optional"},"Configure firewall (optional)"),(0,o.kt)("p",null,"Its your problem"),(0,o.kt)("h2",{id:"domain-and-ssltls-certificates"},"Domain and SSL/TLS certificates"),(0,o.kt)("p",null,"We need domain and certs in .pfx, key, crt files it`s your problem"),(0,o.kt)("p",null,"copy them e.g to ~/medialib/certs"),(0,o.kt)("h2",{id:"configure-database-service"},"Configure database service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd ~/medialib\nmkdir db\nmkdir db/secrets\nmkdir db/config\nsudo mkdir /mnt/media/data\nscp -R ./db/initdb.d ~/medialib/db/initdb.d\nchmod u+x ~/medialib/db/initdb.d/identity-db.sh ~/medialib/db/initdb.d/media-db.sh\nscp ./db/mml-postres.default.conf ~/medialib/db/mml-postres.conf\n\n# create user and password file and enter your root db user and root db password\ntouch db/secrets/user\ntouch db/secrets/password\n\n# create identity.conf with content\ntouch db/config/identity.conf\n\n# create media.conf mit content\ntouch db/config/media.conf\nnano .env\nsudo chown -R 1001:1001 db/\nsudo chmod -R 0550 db/\nsudo docker compose up wekode.mml.db -d\n")),(0,o.kt)("h2",{id:"configure-cache-service"},"Configure cache service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir cache\nscp default.redis.conf ~/medialib/cache/redis.conf\n# change password in redis.conf\n# enter values in .env in redis section\nsudo chown -R 999:999 cache/\nsudo chmod -R 0550 cache/\nsudo docker compose up wekode.mml.cache -d\n")),(0,o.kt)("h2",{id:"configure-message-bus"},"Configure message bus"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir mbus\nscp enabled_plugins ~/medialib/mbus/enabled_plugins\nscp default.rabbitmq.conf ~/medialib/mbus/rabbitmq.conf\n# change deafult user and password in rabitmq.conf\n# enter values in .env in mbus section\nsudo chown -R 1001:1001 mbus/\nsudo chmod -R 0550 mbus/\nsudo docker compose up wekode.mml.mbus -d\n")),(0,o.kt)("h2",{id:"configure-reverse-proxy"},"Configure reverse proxy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir proxy\nscp default.conf.temnplate ~/medialib/proxy\n# enter values in .env file\n# SSL_PORT to 18188\n# enter values in .env file\nsudo chown -R 1001:1001 proxy/\nsudo chmod -R 0550 proxy/\nsudo docker compose up wekode.mml.reverseproxy -d\n")),(0,o.kt)("h2",{id:"configure-identity-service"},"Configure identity service"),(0,o.kt)("p",null,"docker-hub reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"scp Identity.API/default.appsettings.json ~/medialib/identity/appsettings.json\n# enter values in appsettings\n# enter values in .env\nsudo chown -R 1001:1001 identity/\nsudo chmod -R 0550 identity/\nsudo docker compose up wekode.mml.identity -d\nsudo docker exec -it wekode.mml.identity /bin/bash\ncreate\n")),(0,o.kt)("h2",{id:"configure-media-service"},"Configure media service"),(0,o.kt)("p",null,"docker-hub reference"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir media\nscp Media.API/default.appsettings.json ~/medialib/media/appsettings.json\nsudo mkdir /mnt/media/records\n# enter values in appsettings\n# enter values in .env\nsudo chown -R 1001:1001 media/\nsudo chmod -R 0550 media/\nsudo chown -R 1001:1001 /mnt/media/records\nsudo chmod -R 0750 /mnt/media/records\nsudo docker compose up wekode.mml.media -d\n")),(0,o.kt)("h2",{id:"start-backend"},"Start backend"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd ~/medialib\ndocker compose up -d \n")),(0,o.kt)("h2",{id:"create-first-admin-client-and-user"},"Create first admin client and user"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo docker exec -it wekode.mml.identity /bin/bash\ncreate\n")),(0,o.kt)("p",null,"You will be ask for a username and a password. The password must be at least 12 characters long. If no admin app exists already, a new one will be created and the clientId will be printed on the console."),(0,o.kt)("h3",{id:"manage-admin-clients"},"Manage admin clients"),(0,o.kt)("p",null,"You can install the admin app on several computers for example if you have multiple admins. The admin users can be managed in your admin app.\nIf you want to give them a different client id you can generate a new one by using the cli inside the mml.identity project."),(0,o.kt)("p",null,"Admin clients can be created, listed and removed by the command line e.g in the container. To create one client call"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker exec -it wekode.mml.identity /bin/bash\nroot@6712536aabd:/app# admin-create\n")),(0,o.kt)("p",null,"To list all admin clients call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker exec -it wekode.mml.identity /bin/bash\nroot@6712536aabd:/app# admin-list\n")),(0,o.kt)("p",null,"And to remove one client call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker exec -it wekode.mml.identity /bin/bash\nroot@6712536aabd:/app# admin-remove <client id>\n")))}u.isMDXComponent=!0}}]);