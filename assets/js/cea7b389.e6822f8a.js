"use strict";(self.webpackChunkmy_media_lib=self.webpackChunkmy_media_lib||[]).push([[37],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9952:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=n(7462),i=(n(7294),n(3905));const a={sidebar_position:4},r=void 0,s={unversionedId:"customize/ios",id:"customize/ios",title:"ios",description:"You can customize the title, the logo and colors of your app.",source:"@site/docs/customize/ios.md",sourceDirName:"customize",slug:"/customize/ios",permalink:"/mml.project/customize/ios",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"android",permalink:"/mml.project/customize/android"},next:{title:"Concepts",permalink:"/mml.project/category/concepts"}},l={},p=[{value:"Customize",id:"customize",level:2},{value:"Manually",id:"manually",level:3},{value:"Automated",id:"automated",level:3},{value:"Github Action Workflow",id:"github-action-workflow",level:2},{value:"Listen to release tags",id:"listen-to-release-tags",level:3},{value:"Build the app and release it.",id:"build-the-app-and-release-it",level:3},{value:"Run action release",id:"run-action-release",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can customize the title, the logo and colors of your app."),(0,i.kt)("h2",{id:"customize"},"Customize"),(0,i.kt)("h3",{id:"manually"},"Manually"),(0,i.kt)("p",null,"You can customize the app manually. Please check the offical documentation on how to do this for ",(0,i.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/deployment/windows"},"windows"),", ",(0,i.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/deployment/linux"},"linux")," or ",(0,i.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/deployment/macos"},"macOS"),". This guide will show an automated process with github actions. "),(0,i.kt)("h3",{id:"automated"},"Automated"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The automated customization script runs on linux systems only.")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.app"},"mml.app")," provides one ",(0,i.kt)("inlineCode",{parentName:"p"},"_config")," folder, where all configurations for the customization are included. Copy the ",(0,i.kt)("inlineCode",{parentName:"p"},"_config")," folder to ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," and replace the configs with your custom needs."),(0,i.kt)("admonition",{title:"Filenames",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Please do not change the filenames in the config folder. Just replace them by your own files with the same filename.")),(0,i.kt)("p",null,"Icons you can ",(0,i.kt)("a",{parentName:"p",href:"https://www.appicon.co/"},"generate")," and replace the icons in the ",(0,i.kt)("inlineCode",{parentName:"p"},"icons")," folder. You can ",(0,i.kt)("a",{parentName:"p",href:"https://m3.material.io/theme-builder#/custom"},"generate your custom color scheme")," and replace the color values in ",(0,i.kt)("inlineCode",{parentName:"p"},"lib_color_schemes.g.dart"),".\nThe title in different languages and the app id you can update in the app.cfg file. Also you can add here the url for your privacy policy and an url for your legal informations or leave them blank, so no urls will be set."),(0,i.kt)("p",null,"To update run the ",(0,i.kt)("inlineCode",{parentName:"p"},"./customize")," script. This script will clone the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.app"},"mml.app")," and replace all items with the items in the configuration. Copy the ",(0,i.kt)("inlineCode",{parentName:"p"},"./mml.app")," folder to the os you like and ",(0,i.kt)("a",{parentName:"p",href:"../setup/app"},"build the app from source"),"."),(0,i.kt)("h2",{id:"github-action-workflow"},"Github Action Workflow"),(0,i.kt)("p",null,"All the steps above can be done with github actions. Fork the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.app"},"mml.app")," and ",(0,i.kt)("a",{parentName:"p",href:"#automated"},"customize")," the app on your needs. The github workflow consists two actions. Sync fork for listen to new releases and Flutter CI to build the app, when new release is available. You need some ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets"},"github secrets"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"SYNC_PAT")," is a Personal Access Token with the right to create releases.\nFor more information check the step by step guides ",(0,i.kt)("a",{parentName:"p",href:"https://blog.auguron.com/deploying-flutter-apps-with-github-actions-c547c23c0e2f"},"1"),", ",(0,i.kt)("a",{parentName:"p",href:"https://medium.com/team-rockstars-it/the-easiest-way-to-build-a-flutter-ios-app-using-github-actions-plus-a-key-takeaway-for-developers-48cf2ad7c72a"},"2"),", ",(0,i.kt)("a",{parentName:"p",href:"https://damienaicheh.github.io/flutter/github/actions/2021/04/22/build-sign-flutter-ios-github-actions-en.html"},"3"),". "),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Replace all texts in <...Some text...> with your custom values. More comments are in code of actions.")),(0,i.kt)("h3",{id:"listen-to-release-tags"},"Listen to release tags"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'name: Sync fork with upstream\n\non:\n  schedule:\n  - cron:  "0 0 1/7 * *"\n  workflow_dispatch:\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        token: ${{ secrets.SYNC_PAT }}\n    - name: repo-sync\n      uses: repo-sync/github-sync@v2\n      with:\n        source_repo: "https://github.com/we-kode/mml.app"\n        source_branch: "master"\n        destination_branch: "master"\n        github_token: ${{ secrets.SYNC_PAT }}\n        sync_tags: "true"\n    - uses: oprypin/find-latest-tag@v1\n      id: latest-tag\n      with:\n         repository: <your-user-name>/mml.app\n    - name: Tag\n      run: |\n          tag=${{ steps.latest-tag.outputs.tag }}-mml\n          git config user.name "${GITHUB_ACTOR}"\n          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"\n          git tag -a "${tag}" -m ""\n          git push origin "${tag}"\n      if: ${{ !endsWith(steps.latest-tag.outputs.tag,\'-mml\') }}\n    \n    - name: create release\n      uses: ncipollo/release-action@v1\n      if: ${{ !endsWith(steps.latest-tag.outputs.tag,\'-mml\') }}\n      with:\n        tag: ${{ steps.latest-tag.outputs.tag }}-mml\n        token: ${{ secrets.SYNC_PAT }}\n')),(0,i.kt)("h3",{id:"build-the-app-and-release-it"},"Build the app and release it."),(0,i.kt)("p",null,"This workflow will create an ipa file release, which you can use to upload to the app store."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'name: Flutter CI\n\n# Controls when the workflow will run\non:\n  push:\n    tags:\n      - "[0-9]+.[0-9]+.[0-9]+-mml"\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  prepare:\n    runs-on: ubuntu-latest\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n      # Runs a set of commands using the runners shell\n      - name: Customizing\n        run: |\n          version="${{ github.ref_name }}"\n          ver_dump=$(echo "${version/-mml/\'\'}")\n          chmod +x customize\n          ./customize\n          sed -i -E "s/       versionName flutterVersionName/       versionName \\"$ver_dump\\"/" "./mml.app/android/app/build.gradle"\n          sed -i -E "s/        versionCode flutterVersionCode.toInteger\\(\\)/        versionCode \\"${{github.run_number}}\\".toInteger\\(\\)/" "./mml.app/android/app/build.gradle"\n          sed -i -E "s/version: [0-9]+.[0-9]+.[0-9]+\\+[0-9]+/version: $ver_dump+${{github.run_number}}/" "./mml.app/pubspec.yaml"\n      - name: Artefact customized version\n        uses: actions/upload-artifact@v3\n        with:\n          name: Medialib-Custom\n          path: mml.app\n\n  build-ios:\n    runs-on: macos-latest\n    needs: [prepare]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: Medialib-Custom\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: \'stable\'\n      # set your own developer id informations from your apple developer account for your app.\n      - name: Install the Apple certificate and provisioning profile\n        env:\n          P12_BASE64: ${{ secrets.P12_BASE64 }}\n          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}\n          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISION_PROFILE_BASE64 }}\n          PROVISION_PROFILE_UID: ${{ secrets.PROVISION_PROFILE_UID }}\n          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}\n          CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}\n        run: |\n          # create variables\n          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12\n          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision\n          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db\n          # import certificate and provisioning profile from secrets\n          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH\n          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH\n          # create temporary keychain\n          security create-keychain -p "$P12_PASSWORD" $KEYCHAIN_PATH\n          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n          security unlock-keychain -p "$P12_PASSWORD" $KEYCHAIN_PATH\n          # import certificate to keychain\n          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH\n          security list-keychain -d user -s $KEYCHAIN_PATH\n          # apply provisioning profile\n          mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\n          cp $PP_PATH ~/Library/MobileDevice/Provisioning\\ Profiles\n      - name: Install project dependencies\n        run: flutter pub get\n      - name: Generate intermediates\n        run: |\n          flutter pub run build_runner build --delete-conflicting-outputs\n          flutter gen-l10n\n      - name: Build Flutter\n        run: flutter build ios --release --no-codesign\n      - name: Build resolve Swift dependencies\n        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release\n      - name: Build xArchive\n        run: |\n          xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release DEVELOPMENT_TEAM=$TEAM_ID -sdk \'iphoneos\' -destination \'generic/platform=iOS\' -archivePath build-output/mml-${{ github.ref_name }}.xcarchive PROVISIONING_PROFILE=$PROVISION_PROFILE_UID clean archive CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY"\n      - name: Export ipa\n        run: |\n          echo \'<?xml version="1.0" encoding="UTF-8"?>\' >> ios/ExportOptions.plist\n          echo \'<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\' >> ios/ExportOptions.plist\n          echo \'<plist version="1.0">\' >> ios/ExportOptions.plist\n          echo \'<dict>\' >> ios/ExportOptions.plist\n          echo \'<key>method</key>\' >> ios/ExportOptions.plist\n          echo \'<string>app-store</string>\' >> ios/ExportOptions.plist\n          echo \'<key>teamID</key>\' >> ios/ExportOptions.plist\n          echo "<string>${{ secrets.APPLE_TEAM_ID }}</string>" >> ios/ExportOptions.plist\n          echo \'<key>signingStyle</key>\' >> ios/ExportOptions.plist\n          echo \'<string>manual</string>\' >> ios/ExportOptions.plist\n          echo \'<key>provisioningProfiles</key>\' >> ios/ExportOptions.plist\n          echo \'<dict>\' >> ios/ExportOptions.plist\n          echo "<key>de.mml.medialib</key>" >> ios/ExportOptions.plist\n          echo "<string>${{ secrets.PROVISION_PROFILE_UID }}</string>" >> ios/ExportOptions.plist\n          echo \'</dict>\' >> ios/ExportOptions.plist\n          echo \'</dict>\' >> ios/ExportOptions.plist\n          echo \'</plist>\' >> ios/ExportOptions.plist\n          cat ios/ExportOptions.plist\n          xcodebuild -exportArchive -archivePath build-output/mml-${{ github.ref_name }}.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/ExportOptions.plist\n          mv build-output/ios/mml_app.ipa build-output/ios/mml-${{ github.ref_name }}.ipa\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: Medialib-iOS\n          path: build-output/ios\n      - name: Clean up\n        if: ${{ always() }}\n        run: |\n          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db\n          rm ~/Library/MobileDevice/Provisioning\\ Profiles/build_pp.mobileprovision\n          rm ios/ExportOptions.plist\n  release-ios:\n    runs-on: ubuntu-latest\n    needs: [build-ios]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: Medialib-iOS\n      - name: iOS Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, \'refs/tags/\')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: mml-${{ github.ref_name }}.ipa\n')),(0,i.kt)("h3",{id:"run-action-release"},"Run action release"),(0,i.kt)("p",null,"The sync fork action in this example will sync every week and check for a new relase. You can start the sync fork action manually. The main action will be automatically triggered if a new release exists.\nThe result will be an ipa file you can upload to the app store."))}u.isMDXComponent=!0}}]);