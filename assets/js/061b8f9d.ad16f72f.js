"use strict";(self.webpackChunkmy_media_lib=self.webpackChunkmy_media_lib||[]).push([[671],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),u=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return i.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return t?i.createElement(h,s(s({ref:n},p),{},{components:t})):i.createElement(h,s({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var u=2;u<r;u++)s[u]=t[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8692:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var i=t(7462),o=(t(7294),t(3905));const r={sidebar_position:3},s="Android App",a={unversionedId:"customize/android",id:"customize/android",title:"Android App",description:"You can customize your app by color title icon. You can do it manually, please refer to the offical docu. The guide will show an automated process with github actions.",source:"@site/docs/customize/android.md",sourceDirName:"customize",slug:"/customize/android",permalink:"/mml.project/customize/android",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Administration App",permalink:"/mml.project/customize/administration-app"},next:{title:"iOS App",permalink:"/mml.project/customize/ios"}},l={},u=[{value:"Customize",id:"customize",level:3},{value:"Github Action Workflow",id:"github-action-workflow",level:3},{value:"Listen to release tags",id:"listen-to-release-tags",level:4},{value:"Build the app and release it.",id:"build-the-app-and-release-it",level:4},{value:"Run build",id:"run-build",level:4}],p={toc:u};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"android-app"},"Android App"),(0,o.kt)("p",null,"You can customize your app by color title icon. You can do it manually, please refer to the offical docu. The guide will show an automated process with github actions. "),(0,o.kt)("h3",{id:"customize"},"Customize"),(0,o.kt)("p",null,"download or fork\ncopy the _content folder to config annd\nChnage the content in the config folder\nicons\ncolor schema\ntitles and bundle id in the config file"),(0,o.kt)("p",null,"run ./customize script (only on ubuntu)"),(0,o.kt)("p",null,"copy the ./mml.administration-app fodler to the os you will build the app for and build it from source."),(0,o.kt)("h3",{id:"github-action-workflow"},"Github Action Workflow"),(0,o.kt)("p",null,"All the steps above can be done with github actions"),(0,o.kt)("p",null,"cretae a fork of the mml.app repo\ncustomize\ncreate workflows for lsiten on new releases."),(0,o.kt)("h4",{id:"listen-to-release-tags"},"Listen to release tags"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'name: Sync fork with upstream\n\non:\n  schedule:\n  - cron:  "0 0 1/7 * *"\n  workflow_dispatch:\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        token: ${{ secrets.SYNC_PAT }}\n    - name: repo-sync\n      uses: repo-sync/github-sync@v2\n      with:\n        source_repo: "https://github.com/we-kode/mml.app"\n        source_branch: "master"\n        destination_branch: "master"\n        github_token: ${{ secrets.SYNC_PAT }}\n        sync_tags: "true"\n    - uses: oprypin/find-latest-tag@v1\n      id: latest-tag\n      with:\n         repository: <your-user-name>/mml.app\n    - name: Tag\n      run: |\n          tag=${{ steps.latest-tag.outputs.tag }}-mml\n          git config user.name "${GITHUB_ACTOR}"\n          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"\n          git tag -a "${tag}" -m ""\n          git push origin "${tag}"\n      if: ${{ !endsWith(steps.latest-tag.outputs.tag,\'-mml\') }}\n    \n    - name: create release\n      uses: ncipollo/release-action@v1\n      if: ${{ !endsWith(steps.latest-tag.outputs.tag,\'-mml\') }}\n      with:\n        tag: ${{ steps.latest-tag.outputs.tag }}-mml\n        token: ${{ secrets.SYNC_PAT }}\n')),(0,o.kt)("h4",{id:"build-the-app-and-release-it"},"Build the app and release it."),(0,o.kt)("p",null,"This workflow will cerate a aab release. If you want to create an apk please refere to the officialy docu."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'name: Flutter CI\n\n# Controls when the workflow will run\non:\n  push:\n    tags:\n      - "[0-9]+.[0-9]+.[0-9]+-mml"\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  prepare:\n    runs-on: ubuntu-latest\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n      # Runs a set of commands using the runners shell\n      - name: Customizing\n        run: |\n          version="${{ github.ref_name }}"\n          ver_dump=$(echo "${version/-ecg/\'\'}")\n          chmod +x customize\n          ./customize\n          sed -i -E "s/       versionName flutterVersionName/       versionName \\"$ver_dump\\"/" "./mml.app/android/app/build.gradle"\n          sed -i -E "s/        versionCode flutterVersionCode.toInteger\\(\\)/        versionCode \\"${{github.run_number}}\\".toInteger\\(\\)/" "./mml.app/android/app/build.gradle"\n          sed -i -E "s/version: [0-9]+.[0-9]+.[0-9]+\\+[0-9]+/version: $ver_dump+${{github.run_number}}/" "./mml.app/pubspec.yaml"\n      - name: Artefact customized version\n        uses: actions/upload-artifact@v3\n        with:\n          name: ECG-Medialib-Custom\n          path: mml.app\n        \n  build-android:\n    runs-on: ubuntu-latest\n    needs: [prepare]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: ECG-Medialib-Custom\n      - uses: actions/setup-java@v2\n        with:\n          distribution: \'zulu\'\n          java-version: \'11\'\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: \'stable\'\n      - name: Install project dependencies\n        run: flutter pub get\n      - name: Generate intermediates\n        run: |\n          flutter pub run build_runner build --delete-conflicting-outputs\n          flutter gen-l10n\n      - name: Write jks\n        uses: timheuer/base64-to-file@v1.1\n        with:\n          fileName: \'upload-ecgm.jks\'\n          fileDir: \'./android/app/\'\n          encodedString: ${{ secrets.ANDROID_JKS }}\n      - name: Write key.properties\n        run: |\n          echo "storePassword=${{ secrets.ANDROID_JKS_PASS }}" >> ./android/key.properties\n          echo "keyPassword=${{ secrets.ANDROID_JKS_PASS }}" >> ./android/key.properties\n          echo "keyAlias=ecgm" >> ./android/key.properties\n          echo "storeFile=upload-ecgm.jks" >> ./android/key.properties\n      - name: Build artifacts\n        run: |\n          flutter build appbundle --release\n      - name: Cleanup\n        run: |\n          rm ./android/app/upload-ecgm.jks\n          rm ./android/key.properties\n          mv build/app/outputs/bundle/release/app-release.aab build/app/outputs/bundle/release/ecgm-${{ github.ref_name }}.aab\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: ECG-Medialib-Android\n          path: build/app/outputs/bundle/release\n  \n  release-android:\n    runs-on: ubuntu-latest\n    needs: [build-android]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: ECG-Medialib-Android\n      - name: Android Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, \'refs/tags/\')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: ecgm-${{ github.ref_name }}.aab\n\n  build-ios:\n    runs-on: macos-latest\n    needs: [prepare]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: ECG-Medialib-Custom\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: \'stable\'\n      - name: Install the Apple certificate and provisioning profile\n        env:\n          P12_BASE64: ${{ secrets.P12_BASE64 }}\n          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}\n          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISION_PROFILE_BASE64 }}\n          PROVISION_PROFILE_UID: ${{ secrets.PROVISION_PROFILE_UID }}\n          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}\n          CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}\n        run: |\n          # create variables\n          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12\n          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision\n          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db\n          # import certificate and provisioning profile from secrets\n          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH\n          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH\n          # create temporary keychain\n          security create-keychain -p "$P12_PASSWORD" $KEYCHAIN_PATH\n          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n          security unlock-keychain -p "$P12_PASSWORD" $KEYCHAIN_PATH\n          # import certificate to keychain\n          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH\n          security list-keychain -d user -s $KEYCHAIN_PATH\n          # apply provisioning profile\n          mkdir -p ~/Library/MobileDevice/Provisioning\\ Profiles\n          cp $PP_PATH ~/Library/MobileDevice/Provisioning\\ Profiles\n      - name: Install project dependencies\n        run: flutter pub get\n      - name: Generate intermediates\n        run: |\n          flutter pub run build_runner build --delete-conflicting-outputs\n          flutter gen-l10n\n      - name: Build Flutter\n        run: flutter build ios --release --no-codesign\n      - name: Build resolve Swift dependencies\n        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release\n      - name: Build xArchive\n        run: |\n          xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release DEVELOPMENT_TEAM=$TEAM_ID -sdk \'iphoneos\' -destination \'generic/platform=iOS\' -archivePath build-output/ecgm-${{ github.ref_name }}.xcarchive PROVISIONING_PROFILE=$PROVISION_PROFILE_UID clean archive CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY"\n      - name: Export ipa\n        run: |\n          echo \'<?xml version="1.0" encoding="UTF-8"?>\' >> ios/ExportOptions.plist\n          echo \'<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\' >> ios/ExportOptions.plist\n          echo \'<plist version="1.0">\' >> ios/ExportOptions.plist\n          echo \'<dict>\' >> ios/ExportOptions.plist\n          echo \'<key>method</key>\' >> ios/ExportOptions.plist\n          echo \'<string>app-store</string>\' >> ios/ExportOptions.plist\n          echo \'<key>teamID</key>\' >> ios/ExportOptions.plist\n          echo "<string>${{ secrets.APPLE_TEAM_ID }}</string>" >> ios/ExportOptions.plist\n          echo \'<key>signingStyle</key>\' >> ios/ExportOptions.plist\n          echo \'<string>manual</string>\' >> ios/ExportOptions.plist\n          echo \'<key>provisioningProfiles</key>\' >> ios/ExportOptions.plist\n          echo \'<dict>\' >> ios/ExportOptions.plist\n          echo "<key>de.ecg.medialib</key>" >> ios/ExportOptions.plist\n          echo "<string>${{ secrets.PROVISION_PROFILE_UID }}</string>" >> ios/ExportOptions.plist\n          echo \'</dict>\' >> ios/ExportOptions.plist\n          echo \'</dict>\' >> ios/ExportOptions.plist\n          echo \'</plist>\' >> ios/ExportOptions.plist\n          cat ios/ExportOptions.plist\n          xcodebuild -exportArchive -archivePath build-output/ecgm-${{ github.ref_name }}.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/ExportOptions.plist\n          mv build-output/ios/mml_app.ipa build-output/ios/ecgm-${{ github.ref_name }}.ipa\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: ECG-Medialib-iOS\n          path: build-output/ios\n      - name: Clean up\n        if: ${{ always() }}\n        run: |\n          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db\n          rm ~/Library/MobileDevice/Provisioning\\ Profiles/build_pp.mobileprovision\n          rm ios/ExportOptions.plist\n  release-ios:\n    runs-on: ubuntu-latest\n    needs: [build-ios]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: ECG-Medialib-iOS\n      - name: iOS Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, \'refs/tags/\')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: ecgm-${{ github.ref_name }}.ipa\n')),(0,o.kt)("h4",{id:"run-build"},"Run build"),(0,o.kt)("p",null,"snyc fork will in this example sync every week for a new reelase. You can start build manually by runnging the sync_frok action manually."))}c.isMDXComponent=!0}}]);