"use strict";(self.webpackChunkmy_media_lib=self.webpackChunkmy_media_lib||[]).push([[298],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),l=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(a),m=r,h=u["".concat(d,".").concat(m)]||u[m]||c[m]||i;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9160:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},o="Backend",s={unversionedId:"setup/backend",id:"setup/backend",title:"Backend",description:"Securing and hardening of your server and infrastructure is up to you and will not be covered in this documentation.",source:"@site/docs/setup/backend.md",sourceDirName:"setup",slug:"/setup/backend",permalink:"/mml.project/setup/backend",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/mml.project/category/setup"},next:{title:"Administration App",permalink:"/mml.project/setup/administration-app"}},d={},l=[{value:"Copy monodeploy files",id:"copy-monodeploy-files",level:2},{value:"Create mml user",id:"create-mml-user",level:2},{value:"Install docker",id:"install-docker",level:2},{value:"Configure firewall (optional)",id:"configure-firewall-optional",level:2},{value:"Domain and certificates",id:"domain-and-certificates",level:2},{value:"SSL/TLS",id:"ssltls",level:3},{value:"Encryption and Signing",id:"encryption-and-signing",level:3},{value:"Configure database service",id:"configure-database-service",level:2},{value:"Create folders",id:"create-folders",level:3},{value:"Database inital scripts",id:"database-inital-scripts",level:3},{value:"Postgres configuration file",id:"postgres-configuration-file",level:3},{value:"Root database user",id:"root-database-user",level:3},{value:"Identity database configuration",id:"identity-database-configuration",level:3},{value:"Media database configuration",id:"media-database-configuration",level:3},{value:"Update .env file and start service",id:"update-env-file-and-start-service",level:3},{value:"Upgrading postgres version",id:"upgrading-postgres-version",level:3},{value:"Stop all running services",id:"stop-all-running-services",level:4},{value:"Create dumps of all databases you want to backup",id:"create-dumps-of-all-databases-you-want-to-backup",level:4},{value:"Stop Database service",id:"stop-database-service",level:4},{value:"Backup the db data directory",id:"backup-the-db-data-directory",level:4},{value:"Prepare the new version",id:"prepare-the-new-version",level:4},{value:"Import the db dumps",id:"import-the-db-dumps",level:4},{value:"Clean up",id:"clean-up",level:4},{value:"Configure cache service",id:"configure-cache-service",level:2},{value:"Create folder",id:"create-folder",level:3},{value:"Redis configuration",id:"redis-configuration",level:3},{value:"Update .env file and start service",id:"update-env-file-and-start-service-1",level:3},{value:"Configure message bus",id:"configure-message-bus",level:2},{value:"Create folder",id:"create-folder-1",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Update .env file and start service",id:"update-env-file-and-start-service-2",level:3},{value:"Configure reverse proxy",id:"configure-reverse-proxy",level:2},{value:"Create folder",id:"create-folder-2",level:3},{value:"Configuration",id:"configuration-1",level:3},{value:"Update .env file and start service",id:"update-env-file-and-start-service-3",level:3},{value:"Generate App Keys",id:"generate-app-keys",level:2},{value:"Configure identity service",id:"configure-identity-service",level:2},{value:"Create folder",id:"create-folder-3",level:3},{value:"Configuration",id:"configuration-2",level:3},{value:"Replace the app keys.",id:"replace-the-app-keys",level:4},{value:"Replace the name of the pfx certificate and set your pfx password.",id:"replace-the-name-of-the-pfx-certificate-and-set-your-pfx-password",level:4},{value:"Set issuer url to your domain and port you are using as ssl port.",id:"set-issuer-url-to-your-domain-and-port-you-are-using-as-ssl-port",level:4},{value:"Replace the connection string with values you defined when creating the database for the service. And set the redis password you defined when setting up the cache service.",id:"replace-the-connection-string-with-values-you-defined-when-creating-the-database-for-the-service-and-set-the-redis-password-you-defined-when-setting-up-the-cache-service",level:4},{value:"Replace the rabbitmq user and password with the values you defined when setting up the message bus service.",id:"replace-the-rabbitmq-user-and-password-with-the-values-you-defined-when-setting-up-the-message-bus-service",level:4},{value:"Create api client for media service",id:"create-api-client-for-media-service",level:4},{value:"Update .env file and start service",id:"update-env-file-and-start-service-4",level:3},{value:"Configure media service",id:"configure-media-service",level:2},{value:"Create folder",id:"create-folder-4",level:3},{value:"Configuration",id:"configuration-3",level:3},{value:"Replace the app keys.",id:"replace-the-app-keys-1",level:4},{value:"Replace the name of the pfx certificate and set your pfx password.",id:"replace-the-name-of-the-pfx-certificate-and-set-your-pfx-password-1",level:4},{value:"Replace the connection string with values you defined when creating the database for the service.",id:"replace-the-connection-string-with-values-you-defined-when-creating-the-database-for-the-service",level:4},{value:"Set issuer url to your domain and port you are using as ssl port.",id:"set-issuer-url-to-your-domain-and-port-you-are-using-as-ssl-port-1",level:4},{value:"Set the api client id and secret you defined when setting up the identity service.",id:"set-the-api-client-id-and-secret-you-defined-when-setting-up-the-identity-service",level:4},{value:"Replace the rabbitmq user and password with the values you defined when setting up the message bus service.",id:"replace-the-rabbitmq-user-and-password-with-the-values-you-defined-when-setting-up-the-message-bus-service-1",level:4},{value:"Update .env file and start service",id:"update-env-file-and-start-service-5",level:3},{value:"Start backend",id:"start-backend",level:2},{value:"Create first admin client and user",id:"create-first-admin-client-and-user",level:2},{value:"Manage admin clients",id:"manage-admin-clients",level:3}],p={toc:l};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"backend"},"Backend"),(0,r.kt)("admonition",{title:"Security",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Securing and hardening of your server and infrastructure is up to you and will not be covered in this documentation.")),(0,r.kt)("p",null,"You can install the backend on a server you like. Its your choice. You can use ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/"},"kubernetes"),", ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/framework/deployment/"},".net")," or ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"docker compose")," to deploy the backend services. In this documentation we will focus only on the setup of the backend with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"docker compose")," on a ",(0,r.kt)("a",{parentName:"p",href:"https://releases.ubuntu.com/22.04/"},"ubuntu 22.05 LTS"),". Here we show you a step by setp guide you can use to setup the backend manually. Feel free to automate the process. However we do not provide a setup script."),(0,r.kt)("p",null,"The backend consists of multple services which need to be setup seperate. We provide one ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment"},"mono docker-compose file and a default .env-configuration")," file.\nIn the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment/blob/develop/.env"},".env")," file defaults are defined. Feel free to change the configuration on your neeeds."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We assume that you know how to use linux and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"docker compose"),". If not, first look at official docu of ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"docker compose"),".")),(0,r.kt)("h2",{id:"copy-monodeploy-files"},"Copy monodeploy files"),(0,r.kt)("p",null,"In this documentation all files and folders will be placed in ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib"),". Create this folder first."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir ~/medialib\ncd ~/medialib\n")),(0,r.kt)("p",null,"Copy ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment/blob/develop/docker-compose.yml"},(0,r.kt)("inlineCode",{parentName:"a"},"docker-compose.yml"))," and the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment/blob/develop/.env"},(0,r.kt)("inlineCode",{parentName:"a"},".env"))," from the repository to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib")," on server."),(0,r.kt)("h2",{id:"create-mml-user"},"Create mml user"),(0,r.kt)("p",null,"All docker contaienrs will run for user id ",(0,r.kt)("inlineCode",{parentName:"p"},"1001")," and group id ",(0,r.kt)("inlineCode",{parentName:"p"},"1001"),". So cretae group and user first."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo groupadd -r -g 1001 mml && sudo useradd -r -d /nonexistent -s /bin/false -u 1001 -g 1001 mml\n")),(0,r.kt)("h2",{id:"install-docker"},"Install docker"),(0,r.kt)("p",null,"To install docker and create the docker network ",(0,r.kt)("inlineCode",{parentName:"p"},"wekode.mml")," run following commands."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sudo apt-get remove docker docker-engine docker.io containerd runc\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\necho \\\n  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\nsudo usermod -a -G mml media\nsudo docker network create wekode.mml\n')),(0,r.kt)("h2",{id:"configure-firewall-optional"},"Configure firewall (optional)"),(0,r.kt)("p",null,"Default the ssl port ",(0,r.kt)("inlineCode",{parentName:"p"},"443")," will be used for extern communication. Create firewall rules based on you infrastructure and your needs. We do not provide any suggestions on this.\nYou are responsible for the security of your infrastructure."),(0,r.kt)("h2",{id:"domain-and-certificates"},"Domain and certificates"),(0,r.kt)("h3",{id:"ssltls"},"SSL/TLS"),(0,r.kt)("p",null,"All services are running using ssl/tls encryption. We need a fullchain cert with it's private key and a pfx cert file to run the service."),(0,r.kt)("p",null,"Generate a ssl/tls certificate based on your needs for your custom domain and copy it to the certs folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"touch ~/medialib/certs\n*.crt *.key *.pfx\n")),(0,r.kt)("p",null,"Update the required values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/.env")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{5,7}","{5,7}":!0},"cat .env\n\n## ssl certification configuration\n## path, where to find the ssl certificate on host\nVOL_CERTS=/home/mml/medialib/certs\n## the ssl certificate name on host for .crt and .key without extension.\nCERT_NAME=domain.name\n")),(0,r.kt)("h3",{id:"encryption-and-signing"},"Encryption and Signing"),(0,r.kt)("p",null,"Two additional certificates need to be generated named ",(0,r.kt)("inlineCode",{parentName:"p"},"identity.encrypt.pfx")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"identity.sign.pfx"),". Place them in the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/certs")," folder on server. Please check the ",(0,r.kt)("a",{parentName:"p",href:"https://documentation.openiddict.com/"},"official documentation")," on ",(0,r.kt)("a",{parentName:"p",href:"https://documentation.openiddict.com/configuration/encryption-and-signing-credentials.html#registering-a-certificate-recommended-for-production-ready-scenarios"},"how to generate")," them."),(0,r.kt)("h2",{id:"configure-database-service"},"Configure database service"),(0,r.kt)("h3",{id:"create-folders"},"Create folders"),(0,r.kt)("p",null,"As database server ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/"},"postresql")," is used. Each service has it's own database.\nCreate first some fodler to store configuration and databases persistence on host."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir db db/secrets db/config db/data\n")),(0,r.kt)("h3",{id:"database-inital-scripts"},"Database inital scripts"),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment/tree/develop/db/initdb.d"},"database initial scripts")," to the server into ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/db/initdb.d"),". This scripts will create the databases for the services.\nMake the scripts executable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chmod u+x ~/medialib/db/initdb.d/identity-db.sh ~/medialib/db/initdb.d/media-db.sh\n")),(0,r.kt)("h3",{id:"postgres-configuration-file"},"Postgres configuration file"),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment/blob/develop/db/mml-postgres.default.conf"},"postres configuration file")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/db/mml-postgres.conf"),". Remove the ",(0,r.kt)("inlineCode",{parentName:"p"},".default")," part of the filename.\nHere you can configure your database server on your needs or just use the default configuration."),(0,r.kt)("h3",{id:"root-database-user"},"Root database user"),(0,r.kt)("p",null,"Create an user and password file and enter your root db user and root db password"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"touch db/secrets/user\ntouch db/secrets/password\n")),(0,r.kt)("h3",{id:"identity-database-configuration"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/we-kode/mml.identity"},"Identity")," database configuration"),(0,r.kt)("p",null,"Create file with filename ",(0,r.kt)("inlineCode",{parentName:"p"},"identity.conf")," and configure your user, password and database name for the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.identity"},"identity service"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# create identity.conf with content\ntouch db/config/identity.conf\n\nIDENTITY_DB=identity\nIDENTITY_USR=identity\nIDENTITY_PW=identity\n")),(0,r.kt)("h3",{id:"media-database-configuration"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/we-kode/mml.media"},"Media")," database configuration"),(0,r.kt)("p",null,"Create file with filename ",(0,r.kt)("inlineCode",{parentName:"p"},"media.conf")," and configure your user, password and database name for the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.media"},"media service"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# create media.conf with content\ntouch db/config/media.conf\n\nMEDIA_DB=media\nMEDIA_USR=media\nMEDIA_PW=media\n")),(0,r.kt)("h3",{id:"update-env-file-and-start-service"},"Update .env file and start service"),(0,r.kt)("p",null,"Update the required values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/.env")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{7,9,11,13,15,17}","{7,9,11,13,15,17}":!0},"cat .env\n\n## db configuration section\n## The docker tag to be used.\n# POSTRES_VERSION=latest\n## Path to the file on host where the root user credentials are stored.\nSECRETS_VOL=/home/mml/medialib/db/secrets\n## Path to the file on host where the root user password is stored.\nPOSTGRES_PASSWORD_FILE=password\n## Path to the file on host where the root user name is stored.\nPOSTGRES_USER_FILE=user\n## Path to the file of tzhe postres configuration file on host based on the mml-postgres.default.conf\nPG_CONFIG_VOL=/home/mml/medialib/db/mml-postgres.conf\n## Path to the database persistent data on host.\nPGDATA_VOL=/home/mml/medialib/db/data\n## Path to the folder on host where to persist db configs for dbs and users (configured files in ./db/default-db-configs).\nDB_CONFIG_VOL=/home/mml/medialib/db/config\n")),(0,r.kt)("p",null,"Set user rights of the folder to the ",(0,r.kt)("a",{parentName:"p",href:"#create-mml-user"},"docker user")," and start the database service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown -R 1001:1001 db/\nsudo docker compose up wekode.mml.db -d\n")),(0,r.kt)("h3",{id:"upgrading-postgres-version"},"Upgrading postgres version"),(0,r.kt)("p",null,"It is recommended to use a fixed version of the postgres docker image and not the latest tag. When you want to upgrade to newer version of postgres follow the following steps:"),(0,r.kt)("h4",{id:"stop-all-running-services"},"Stop all running services"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose down\n")),(0,r.kt)("h4",{id:"create-dumps-of-all-databases-you-want-to-backup"},"Create dumps of all databases you want to backup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up wekode.mml.db -d\ndocker exec -it wekode.mml.db pg_dump <database> -U <superuser> > <database>.sql\n")),(0,r.kt)("h4",{id:"stop-database-service"},"Stop Database service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose down wekode.mml.db\n")),(0,r.kt)("h4",{id:"backup-the-db-data-directory"},"Backup the db data directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mv <db-folder-on-host>/ db-old/\nmkdir <db-folder-on-host>\n")),(0,r.kt)("h4",{id:"prepare-the-new-version"},"Prepare the new version"),(0,r.kt)("p",null,"Increment the version of postgres in the env file and start the container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up -d wekode.mml.db\n")),(0,r.kt)("h4",{id:"import-the-db-dumps"},"Import the db dumps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -i wekode.mml.db psql -U <superuser|dbuser> -d <database> -f <database>.sql\n")),(0,r.kt)("h4",{id:"clean-up"},"Clean up"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rm -rf db-old\nrm <database>.sql\ndocker compose up -d\n")),(0,r.kt)("h2",{id:"configure-cache-service"},"Configure cache service"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://redis.io/"},"Redis")," is used as cache. Setup redis with following steps."),(0,r.kt)("h3",{id:"create-folder"},"Create folder"),(0,r.kt)("p",null,"Create the folder where the cache configuration will be."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mkdir cache\n")),(0,r.kt)("h3",{id:"redis-configuration"},"Redis configuration"),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment/blob/develop/cache/default.redis.conf"},(0,r.kt)("inlineCode",{parentName:"a"},"default.redis.conf"))," file to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/cache/redis.conf"),".  Remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"default.")," part of the filename.\nReplace ",(0,r.kt)("inlineCode",{parentName:"p"},"<password>")," with your own password."),(0,r.kt)("h3",{id:"update-env-file-and-start-service-1"},"Update .env file and start service"),(0,r.kt)("p",null,"Update the required values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/.env")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{7}","{7}":!0},"cat .env\n\n## redis cache configuration section\n## The docker tag to be used.\n#REDIS_VERSION=latest\n## Path to the folder on host which stores the default.redis.conf file\nCONFIG_PATH=/home/mml/medialib/cache\n")),(0,r.kt)("p",null,"The docker of the redis image runs for user with id ",(0,r.kt)("inlineCode",{parentName:"p"},"999"),". Update the user rights of the folder to the redis user and group ",(0,r.kt)("inlineCode",{parentName:"p"},"999")," and start the cache service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown -R 999:999 cache/\nsudo docker compose up wekode.mml.cache -d\n")),(0,r.kt)("h2",{id:"configure-message-bus"},"Configure message bus"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/"},"RabbitMQ")," is used as message bus between backend services."),(0,r.kt)("h3",{id:"create-folder-1"},"Create folder"),(0,r.kt)("p",null,"Create the folder where the configuration will be."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir mbus\n")),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"Copy ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment/blob/develop/mbus/enabled_plugins"},(0,r.kt)("inlineCode",{parentName:"a"},"enabled_plugins"))," to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/mbus/enabled_plugins")," on the server. Copy ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment/blob/develop/mbus/default.rabbitmq.conf"},(0,r.kt)("inlineCode",{parentName:"a"},"default.rebbitmq.conf"))," to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/mbus/rabbitmq.conf")," on the server. Remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"default.")," part of the filename.\nChange the default user ",(0,r.kt)("inlineCode",{parentName:"p"},"guest")," and password ",(0,r.kt)("inlineCode",{parentName:"p"},"guest")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq.conf"),"."),(0,r.kt)("h3",{id:"update-env-file-and-start-service-2"},"Update .env file and start service"),(0,r.kt)("p",null,"Update the required values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/.env")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{7,9}","{7,9}":!0},"cat .env\n\n## mbus configuration section\n## The docker tag to be used for the rabbitmq image.\n# MBUS_VERSION=latest\n## Path to the enabled_plugins file on host.\nENABLED_PLUGINS_FILE=/home/mml/medialib/mbus/enabled_plugins\n## Path to the default.rabbitmq.conf file on host.\nCONFIG_FILE=/home/mml/medialib/mbus/rabbitmq.conf\n")),(0,r.kt)("p",null,"Set user rights of the folder to the ",(0,r.kt)("a",{parentName:"p",href:"#create-mml-user"},"docker user")," and start the service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown -R 1001:1001 mbus/\nsudo docker compose up wekode.mml.mbus -d\n")),(0,r.kt)("h2",{id:"configure-reverse-proxy"},"Configure reverse proxy"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nginx.com/"},"Nginx")," is used as reverse proxy and api gateway. This is the entrypoint to the backend from extern requests of the admin and mobile app."),(0,r.kt)("h3",{id:"create-folder-2"},"Create folder"),(0,r.kt)("p",null,"Create the folder where the configuration will be."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir proxy\n")),(0,r.kt)("h3",{id:"configuration-1"},"Configuration"),(0,r.kt)("p",null,"Copy ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.deployment/blob/develop/reverse-proxy/default.conf.template"},(0,r.kt)("inlineCode",{parentName:"a"},"default.conf.template"))," to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/proxy\\default.conf.template")," on the server."),(0,r.kt)("h3",{id:"update-env-file-and-start-service-3"},"Update .env file and start service"),(0,r.kt)("p",null,"Update the required values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/.env")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{7,11}","{7,11}":!0},"cat .env\n\n## proxy configuration section\n## The docker tag to be used.\n# NGINX_VERSION=latest\n## The ssl port on the host machine for requests to the mml-app from extern. Recomended to be changed to another port.\nSSL_PORT=5555\n## The port the reverse proxy is listen on in the docker file.\n#INTERN_SSL_PORT=5050\n## Path to the folder where the default.conf.template file is stored on host.\nCONF_TEMPLATE=/home/media/medialib/proxy\n## Upload file limit to prevent huge files to be uplaoded to server.\n#FILE_UPLOAD_LIMIT=100m\n...\n")),(0,r.kt)("p",null,"Set user rights of the folder to the ",(0,r.kt)("a",{parentName:"p",href:"#create-mml-user"},"docker user")," and start the service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown -R 1001:1001 proxy/\nsudo docker compose up wekode.mml.reverseproxy -d\n")),(0,r.kt)("h2",{id:"generate-app-keys"},"Generate App Keys"),(0,r.kt)("p",null,"App keys will be used to verify requests to the backend. Only requests containing the app-key in the header will be accepted. Two app keys are required. One for the admin app and one for the mobile app.\nThe app keys are Guids. ",(0,r.kt)("a",{parentName:"p",href:"https://www.guidgen.com/"},"Generate")," two random Guids as app keys."),(0,r.kt)("h2",{id:"configure-identity-service"},"Configure identity service"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.identity"},"identity service")," is used for managing the users, clients and logins of ",(0,r.kt)("a",{parentName:"p",href:"/"},"My Media Lib"),"."),(0,r.kt)("h3",{id:"create-folder-3"},"Create folder"),(0,r.kt)("p",null,"Create the folder where the configuration will be."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir identity\n")),(0,r.kt)("h3",{id:"configuration-2"},"Configuration"),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.identity/blob/master/Identity.API/default.appsettings.json"},(0,r.kt)("inlineCode",{parentName:"a"},"default.appsettings.json"))," to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/identity/appsettings.json")," on server. Remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"default.")," part of the filename."),(0,r.kt)("h4",{id:"replace-the-app-keys"},"Replace the ",(0,r.kt)("a",{parentName:"h4",href:"#generate-app-keys"},"app keys"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat ~/medialib/identity/appsettings.json\n\n...\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'  "ADMIN_APP_KEY": "<admin_app_key>", \n  "APP_KEY": "<app_key>",\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"...\n")),(0,r.kt)("h4",{id:"replace-the-name-of-the-pfx-certificate-and-set-your-pfx-password"},"Replace the name of the pfx certificate and set your pfx password."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"TLS": {\n    "Cert": "/certs/<name of cert>.pfx",\n    "Password": "<password>"\n  },\n')),(0,r.kt)("h4",{id:"set-issuer-url-to-your-domain-and-port-you-are-using-as-ssl-port"},"Set issuer url to your domain and port you are using as ssl port."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{9}","{9}":!0},'"OpenId": {\n    "EncryptionCert": "/certs/identity.encrypt.pfx",\n    "SigningCert": "/certs/identity.sign.pfx",\n    "AccessTokenLifetimeMinutes": "60",\n    "RefreshTokenLifetimeMinutes": "43200",\n    "RefreshTokenReuseLeewaySeconds": "10",\n    "TokenLifespanMinutes": "15",\n    "CleanOrphanTokenDays": "1",\n    "Issuer":  "https://<url>:<port>/"\n  },\n')),(0,r.kt)("h4",{id:"replace-the-connection-string-with-values-you-defined-when-creating-the-database-for-the-service-and-set-the-redis-password-you-defined-when-setting-up-the-cache-service"},"Replace the connection string with values you ",(0,r.kt)("a",{parentName:"h4",href:"#identity-database-configuration"},"defined")," when creating the database for the service. And set the redis password you ",(0,r.kt)("a",{parentName:"h4",href:"#redis-configuration"},"defined")," when setting up the cache service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"ConnectionStrings": {\n    "IdentityConnection": "Server=wekode.mml.db;Port=5432;Database=identity;User Id=identity;Password=identity;",\n    "DistributedCache": "wekode.mml.cache:7379,password=<password>"\n  },\n')),(0,r.kt)("h4",{id:"replace-the-rabbitmq-user-and-password-with-the-values-you-defined-when-setting-up-the-message-bus-service"},"Replace the rabbitmq user and password with the values you ",(0,r.kt)("a",{parentName:"h4",href:"#configure-message-bus"},"defined")," when setting up the message bus service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{3,4}","{3,4}":!0},'"MassTransit": {\n    "Host": "wekode.mml.mbus",\n    "User": "guest",\n    "Password": "guest",\n    "VirtualHost": "/",\n    "WaitUntilStarted": true,\n    "StartTimeoutSeconds": 10,\n    "StopTimeoutSeconds": 30\n  },\n')),(0,r.kt)("h4",{id:"create-api-client-for-media-service"},"Create api client for media service"),(0,r.kt)("p",null,"To allow the media service to validate access tokens one oauth client need to be generated, so the media service can send requests to the identity service. The values are just ",(0,r.kt)("a",{parentName:"p",href:"https://www.guidgen.com/"},"random Guids"),". The clients defined here will be created automatically on startup."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{3,4}","{3,4}":!0},'"ApiClients": [\n    {\n      "ClientId": "<ClientId>",\n      "ClientSecret": "<ClientSecret>"\n    }\n  ]\n')),(0,r.kt)("h3",{id:"update-env-file-and-start-service-4"},"Update .env file and start service"),(0,r.kt)("p",null,"Update the required values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/.env")," file."),(0,r.kt)("admonition",{title:"Actual Version",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Actual docker image can be found on ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/w3kod3/wekode.mml.identity/tags"},"docker-hub"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{5,8}","{5,8}":!0},"cat .env\n\n## identity configuration section\n## The docker tag to be used.\nIDENTITY_VERSION=1.0.2\n## Path and name on host machine where the appsettings is stored.\n## for example /app/config/appsettings.json\nIDENTITY_APPSETTINGS=/home/mml/medialib/identity/appsettings.json\n")),(0,r.kt)("p",null,"Set user rights of the folder to the ",(0,r.kt)("a",{parentName:"p",href:"#create-mml-user"},"docker user")," and start the service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown -R 1001:1001 identity/\nsudo docker compose up wekode.mml.identity -d\n")),(0,r.kt)("h2",{id:"configure-media-service"},"Configure media service"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.media"},"media service")," is used for managing the uploaded ",(0,r.kt)("a",{parentName:"p",href:"../concepts/records"},"records")," of ",(0,r.kt)("a",{parentName:"p",href:"/"},"My Media Lib"),"."),(0,r.kt)("h3",{id:"create-folder-4"},"Create folder"),(0,r.kt)("p",null,"Create the folder where the configuration and uploaded ",(0,r.kt)("a",{parentName:"p",href:"../concepts/records"},"records")," will be."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir media media/records\n")),(0,r.kt)("h3",{id:"configuration-3"},"Configuration"),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.media/blob/master/Media.API/default.appsettings.json"},(0,r.kt)("inlineCode",{parentName:"a"},"default.appsettings.json"))," to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/media/appsettings.json")," on server. Remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"default.")," part of the filename."),(0,r.kt)("h4",{id:"replace-the-app-keys-1"},"Replace the ",(0,r.kt)("a",{parentName:"h4",href:"#generate-app-keys"},"app keys"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat ~/medialib/identity/appsettings.json\n\n...\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'  "ADMIN_APP_KEY": "<admin_app_key>", \n  "APP_KEY": "<app_key>",\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"...\n")),(0,r.kt)("h4",{id:"replace-the-name-of-the-pfx-certificate-and-set-your-pfx-password-1"},"Replace the name of the pfx certificate and set your pfx password."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"TLS": {\n    "Cert": "/certs/<name of cert>.pfx",\n    "Password": "<password>"\n  },\n')),(0,r.kt)("h4",{id:"replace-the-connection-string-with-values-you-defined-when-creating-the-database-for-the-service"},"Replace the connection string with values you ",(0,r.kt)("a",{parentName:"h4",href:"#media-database-configuration"},"defined")," when creating the database for the service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"ConnectionStrings": {\n    "MediaConnection": "Server=wekode.mml.db;Port=5432;Database=media;User Id=media;Password=media;"\n  },\n')),(0,r.kt)("h4",{id:"set-issuer-url-to-your-domain-and-port-you-are-using-as-ssl-port-1"},"Set issuer url to your domain and port you are using as ssl port."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{3}","{3}":!0},'"OpenId": {\n    "EncryptionCert": "/etc/ssl/certs/identity.encrypt.pfx",\n    "Issuer": "https://<url>:<port>/"\n  },\n')),(0,r.kt)("h4",{id:"set-the-api-client-id-and-secret-you-defined-when-setting-up-the-identity-service"},"Set the api client id and secret you ",(0,r.kt)("a",{parentName:"h4",href:"#create-api-client-for-media-service"},"defined")," when setting up the identity service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{2,3}","{2,3}":!0},' "ApiClient": {\n    "ClientId": "<ClientId>",\n    "ClientSecret": "<ClientSecret>"\n  },\n')),(0,r.kt)("h4",{id:"replace-the-rabbitmq-user-and-password-with-the-values-you-defined-when-setting-up-the-message-bus-service-1"},"Replace the rabbitmq user and password with the values you ",(0,r.kt)("a",{parentName:"h4",href:"#configure-message-bus"},"defined")," when setting up the message bus service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{3,4}","{3,4}":!0},'"MassTransit": {\n    "Host": "wekode.mml.mbus",\n    "User": "guest",\n    "Password": "guest",\n    "VirtualHost": "/",\n    "WaitUntilStarted": true,\n    "StartTimeoutSeconds": 10,\n    "StopTimeoutSeconds": 30,\n    "ConcurrentMessageLimit":  10\n  }\n')),(0,r.kt)("h3",{id:"update-env-file-and-start-service-5"},"Update .env file and start service"),(0,r.kt)("p",null,"Update the required values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"~/medialib/.env")," file."),(0,r.kt)("admonition",{title:"Actual Version",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Actual docker image can be found on ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/w3kod3/wekode.mml.media/tags"},"docker-hub"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{5,8,10}","{5,8,10}":!0},"cat .env\n\n## media configuration section\n## The docker tag to be used.\nMEDIA_VERSION=1.2.1\n## Path and name on host machine where the appsettings is stored.\n## for example /app/config/appsettings.json\nMEDIA_APPSETTINGS=/home/mml/medialib/media/appsettings.json\n## Path to the folder on host where to backup the uploaded and indexed records.\nVOL_RECORDS=/home/mml/medialib/media/records\n")),(0,r.kt)("p",null,"Set user rights of the folder to the ",(0,r.kt)("a",{parentName:"p",href:"#create-mml-user"},"docker user")," and start the service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown -R 1001:1001 media/\nsudo chown -R 1001:1001 media/records\nsudo docker compose up wekode.mml.media -d\n")),(0,r.kt)("h2",{id:"start-backend"},"Start backend"),(0,r.kt)("p",null,"You can now start all services."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up -d \n")),(0,r.kt)("h2",{id:"create-first-admin-client-and-user"},"Create first admin client and user"),(0,r.kt)("p",null,"No default user exists at the beginning. First you have to create one. It can be done with the command line interface inside the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.identity"},"mml.identity")," project. When the service is running inside docker the call will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker exec -it wekode.mml.identity /bin/bash\nroot@6712536aabd:/app# create\n")),(0,r.kt)("p",null,"You will be ask for a username and a password. If no admin app client id exists already, a new one will be created and the client id will be printed on the console."),(0,r.kt)("admonition",{title:"Password length",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The password of one admin user must be at least 12 characters long. Shorter passwords are not accepted.")),(0,r.kt)("h3",{id:"manage-admin-clients"},"Manage admin clients"),(0,r.kt)("p",null,"You can install the admin app on several computers for example if you have multiple ",(0,r.kt)("a",{parentName:"p",href:"../concepts/admins"},"admins"),". The ",(0,r.kt)("a",{parentName:"p",href:"../concepts/admins"},"admin users")," can be managed in your admin app.\nIf you want to give them a different client id, you can generate a new one by using the command line interface inside the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/we-kode/mml.identity"},"mml.identity")," project."),(0,r.kt)("p",null,"Admin clients can be created, listed and removed by the command line interface. To create one client hwne the service is running in docker call"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -it wekode.mml.identity /bin/bash\nroot@6712536aabd:/app# admin-create\n")),(0,r.kt)("p",null,"To list all admin client ids call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -it wekode.mml.identity /bin/bash\nroot@6712536aabd:/app# admin-list\n")),(0,r.kt)("p",null,"And to remove one client call and replace ",(0,r.kt)("inlineCode",{parentName:"p"},"<client id>")," with your client id you want to remove:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -it wekode.mml.identity /bin/bash\nroot@6712536aabd:/app# admin-remove <client id>\n")))}c.isMDXComponent=!0}}]);