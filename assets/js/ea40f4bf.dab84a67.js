"use strict";(self.webpackChunkmy_media_lib=self.webpackChunkmy_media_lib||[]).push([[356],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),u=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return i.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return t?i.createElement(b,s(s({ref:n},c),{},{components:t})):i.createElement(b,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<r;u++)s[u]=t[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8163:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var i=t(7462),a=(t(7294),t(3905));const r={sidebar_position:2},s="Administration App",o={unversionedId:"customize/administration-app",id:"customize/administration-app",title:"Administration App",description:"You can customize your admin app by color title icon. You can do it manually, please refer to the offical docu. The guide will show an automated process with github actions.",source:"@site/docs/customize/administration-app.md",sourceDirName:"customize",slug:"/customize/administration-app",permalink:"/mml.project/customize/administration-app",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Customization",permalink:"/mml.project/category/customization"},next:{title:"Android App",permalink:"/mml.project/customize/android"}},l={},u=[{value:"Customize",id:"customize",level:2},{value:"Github Action Workflow",id:"github-action-workflow",level:2},{value:"Listen to release tags",id:"listen-to-release-tags",level:3},{value:"Build the app and release it.",id:"build-the-app-and-release-it",level:3},{value:"Run build",id:"run-build",level:3}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"administration-app"},"Administration App"),(0,a.kt)("p",null,"You can customize your admin app by color title icon. You can do it manually, please refer to the offical docu. The guide will show an automated process with github actions. "),(0,a.kt)("h2",{id:"customize"},"Customize"),(0,a.kt)("p",null,"Chnage the content in the config folder\nicons\ncolor schema\ntitles and bundle id in the config file"),(0,a.kt)("p",null,"run ./customize script (only on ubuntu)"),(0,a.kt)("p",null,"copy the ./mml.administration-app fodler to the os you will build the app for and build it from source."),(0,a.kt)("h2",{id:"github-action-workflow"},"Github Action Workflow"),(0,a.kt)("p",null,"All the steps above can be done with github actions"),(0,a.kt)("p",null,"fork and customize then cretae workflows for github actions"),(0,a.kt)("h3",{id:"listen-to-release-tags"},"Listen to release tags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'name: Sync fork with upstream\n\non:\n  schedule:\n  - cron:  "0 0 1/7 * *"\n  workflow_dispatch:\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        token: ${{ secrets.SYNC_PAT }}\n        persist-credentials: false\n    - name: repo-sync\n      uses: repo-sync/github-sync@v2\n      with:\n        source_repo: "https://github.com/we-kode/mml.administration-app"\n        source_branch: "master"\n        destination_branch: "master"\n        github_token: ${{ secrets.SYNC_PAT }}\n        sync_tags: "true"\n    - uses: oprypin/find-latest-tag@v1\n      id: latest-tag\n      with:\n         repository: ecg-media/mml.administration-app\n    - name: Tag\n      run: |\n          tag=${{ steps.latest-tag.outputs.tag }}-ecg\n          git config user.name "${GITHUB_ACTOR}"\n          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"\n          git tag -a "${tag}" -m ""\n          git push origin "${tag}"\n      if: ${{ !endsWith(steps.latest-tag.outputs.tag,\'-ecg\') }}\n    \n    - name: create release\n      uses: ncipollo/release-action@v1\n      if: ${{ !endsWith( steps.latest-tag.outputs.tag, \'-ecg\' ) }}\n      with:\n        tag: ${{ steps.latest-tag.outputs.tag }}-ecg\n        token: ${{ secrets.SYNC_PAT }}\n')),(0,a.kt)("h3",{id:"build-the-app-and-release-it"},"Build the app and release it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'# based on https://angeloavv.medium.com/how-to-distribute-flutter-desktop-app-binaries-using-github-actions-f8d0f9be4d6b\n# TODO auto incerment versions.\n\nname: Flutter CI\n\n# Controls when the workflow will run\non:\n  push:\n    tags:\n      - "[0-9]+.[0-9]+.[0-9]+-ecg"\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  prepare:\n    runs-on: ubuntu-latest\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n      # Runs a set of commands using the runners shell\n      - name: Customizing\n        run: |\n          version="${{ github.ref_name }}"\n          ver_dump=$(echo "${version/-ecg/\'\'}")\n          chmod +x customize\n          ./customize\n          sed -i -E "s/version: [0-9]+.[0-9]+.[0-9]+\\+[0-9]+/version: $ver_dump+${{github.run_number}}/" "./mml.administration-app/pubspec.yaml"\n          sed -i -E "s/#define VERSION_AS_STRING \\"1.0.0\\"/#define VERSION_AS_STRING \\"$ver_dump\\"/" "./mml.administration-app/windows/runner/Runner.rc"\n      - name: Artefact customized version\n        uses: actions/upload-artifact@v3\n        with:\n          name: ECG-Medialib-Admin-Custom\n          path: mml.administration-app\n        \n  build-and-release-linux:\n    # TODO create linux rpm and debian packages\n    runs-on: ubuntu-latest\n    needs: [prepare]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: ECG-Medialib-Admin-Custom\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: \'stable\'\n      - name: Install dependencies\n        run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libsecret-1-dev libjsoncpp-dev libsecret-1-0\n      - name: Install project dependencies\n        run: flutter pub get\n      - name: Generate intermediates\n        run: |\n          flutter pub run build_runner build --delete-conflicting-outputs\n          flutter gen-l10n\n      - name: Enable linux build\n        run: flutter config --enable-linux-desktop\n      - name: Build artifacts\n        run: |\n          flutter build linux --release\n      - name: Archive Release\n        uses: thedoctor0/zip-release@master\n        with:\n          type: \'zip\'\n          filename: ECG-Medialib-Admin-${{github.ref_name}}-linux.zip\n          directory: build/linux/x64/release/bundle\n      - name: Linux Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, \'refs/tags/\')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: build/linux/x64/release/bundle/ECG-Medialib-Admin-${{github.ref_name}}-linux.zip\n  \n  build-and-release-windows:\n    runs-on: windows-latest\n    needs: [prepare]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: \'stable\'\n      - name: Prepare sign key\n        env:\n           PFX_CONTENT: ${{ secrets.SIGN_KEY }}\n        run: |\n           $pfxPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "ecg_sign.pfx";\n           $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT);\n           [IO.File]::WriteAllBytes($pfxPath, $encodedBytes)\n           Write-Output "::set-output name=PFX_PATH::$pfxPath";\n        id: create-pfx\n        shell: pwsh\n      - uses: actions/download-artifact@v3\n        with:\n          name: ECG-Medialib-Admin-Custom\n      - name: Install project dependencies\n        run: flutter pub get\n      - name: Generate intermediates\n        run: |\n          flutter pub run build_runner build --delete-conflicting-outputs\n          flutter gen-l10n\n      - name: Enable windows build\n        run: flutter config --enable-windows-desktop\n      - name: Build artifacts\n        run: |\n          $version = "${{ github.ref_name }}"\n          $ver_dump = $version.replace(\'-ecg\', \'.0\')\n          flutter build windows --release\n          flutter pub run msix:create --version $ver_dump --install-certificate false -c ${{ steps.create-pfx.outputs.PFX_PATH }} -p ${{ secrets.SIGN_PASS }} -u ECG -b ${{ secrets.SIGN_SUB }}\n          mkdir rel\n          echo "Before installing app. Install the publisher public key in your Computer Certmanager as Trusted CA Cert, so the publisher will be trusted on your machine." > rel/README_FIRST.txt\n          cp ecg_sign.cer rel/ecg_sign.cer\n          mv  build/windows/runner/Release/mml_admin.msix rel/ECG-Medialib-Admin-${{github.ref_name}}.msix\n      - name: Archive Release\n        uses: thedoctor0/zip-release@master\n        with:\n          type: \'zip\'\n          filename: ECG-Medialib-Admin-${{github.ref_name}}-windows.zip\n          directory: rel\n      - name: Windows Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, \'refs/tags/\')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: rel/ECG-Medialib-Admin-${{github.ref_name}}-windows.zip\n      - name: Cleanup\n        run: |\n           Remove-Item -Path ${{ steps.create-pfx.outputs.PFX_PATH }};\n  \n  build-and-release-macos:\n    runs-on: macos-latest\n    needs: [prepare]\n    env:\n      MACOS_APP_RELEASE_PATH: build/macos/Build/Products/Release\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/download-artifact@v3\n        with:\n          name: ECG-Medialib-Admin-Custom\n      - uses: subosito/flutter-action@v1\n        with:\n          channel: \'stable\'\n      - name: Install project dependencies\n        run: flutter pub get\n      - name: Generate intermediates\n        run: |\n          flutter pub run build_runner build --delete-conflicting-outputs\n          flutter gen-l10n\n      - name: Enable macOS build\n        run: flutter config --enable-macos-desktop\n      - name: Build artifacts\n        run: flutter build macos --release\n      - name: Create a dmg\n        run: |\n          echo "Install create-dmg"\n          brew install create-dmg\n          cd $MACOS_APP_RELEASE_PATH\n          create-dmg \\\n            --volname "ECG Mediathek" \\\n            --window-pos 200 120 \\\n            --window-size 800 529 \\\n            --icon-size 130 \\\n            --text-size 14 \\\n            --icon "ECG Mediathek.app" 260 250 \\\n            --hide-extension "ECG Mediathek.app" \\\n            --app-drop-link 540 250 \\\n            --hdiutil-quiet \\\n            "ECG-Medialib-Admin-${{github.ref_name}}-macos.dmg" \\\n            "ECG Mediathek.app"\n      - name: macOS Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, \'refs/tags/\')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: build/macos/Build/Products/Release/ECG-Medialib-Admin-${{github.ref_name}}-macos.dmg\n')),(0,a.kt)("h3",{id:"run-build"},"Run build"),(0,a.kt)("p",null,"snyc fork will in this example sync every week for a new reelase. You can start build manually by runnging the sync_frok action manually."))}p.isMDXComponent=!0}}]);